import tkinter as tk
from tkinter import messagebox
import json
import os
import random

class DataManagementSystem:
    def __init__(self, root):
        self.root = root
        self.root.title("Dorian's Data System")

    
        self.domain_var = tk.StringVar()
        self.username_var = tk.StringVar()
        self.password_var = tk.StringVar()

        
        self.amount_var = tk.StringVar()
        self.length_var = tk.StringVar()
        self.special_var = tk.StringVar()
        self.numbers_var = tk.StringVar()
        self.lowercase_var = tk.StringVar()
        self.capitals_var = tk.StringVar()

        
        self.saved_logins = {}
        self.saved_address = {}
        self.saved_banking_info = {}

       
        self.load_data_from_file()

        
        self.frames = {}
        self.create_frames()

       
        self.create_widgets()

    entry_style = {'font': ('Arial', 12), 'bg': 'white', 'width': 20}
    label_style = {'font': ('Montserrat', 12), 'bg': '#f0f0f0'}
    button_style = {'font': ('Montserrat', 12), 'bg': '#4CAF50', 'fg': 'white', 'width': 15, 'height': 1}

    def load_data_from_file(self):
        DATA_FILE = 'save_data.json'
        if os.path.exists(DATA_FILE):
            with open(DATA_FILE, 'r') as file:
                saved_data = json.load(file)
                self.saved_logins = saved_data.get('logins', {})
                self.saved_address = saved_data.get('address', {})
                self.saved_banking_info = saved_data.get('banking_info', {})

    def save_data_to_file(self):
        DATA_FILE = 'save_data.json'
        data_to_save = {
            'logins': self.saved_logins,
            'address': self.saved_address,
            'banking_info': self.saved_banking_info
        }
        with open(DATA_FILE, 'w') as file:
            json.dump(data_to_save, file)

    def create_frames(self):
       
        for option in ['Save Login', 'Generate Password', 'Save Personal Information', 'Save Banking Info', 'See All Saved Data']:
            self.frames[option] = tk.Frame(self.root)

    def create_widgets(self):
        
        self.root.geometry("400x300")
        self.root.configure(bg="#f0f0f0")

        
        tk.Label(self.root, text="Select an option:", **self.label_style).pack(pady=10)

       
        options = ['Save Login', 'Generate Password', 'Save Personal Information', 'Save Banking Info', 'See All Saved Data']
        for option in options:
            tk.Button(self.root, text=option, command=lambda o=option: self.show_frame(o), **self.button_style).pack(pady=5)

       
        for frame in self.frames.values():
            frame.pack_forget()

       
        self.show_frame('Save Login')

    def show_frame(self, option):
        
        for frame in self.frames.values():
            frame.pack_forget()
        self.frames[option].pack(fill=tk.BOTH, expand=True)

        
        if option == 'Save Login':
            self.create_save_login_frame()
        elif option == 'Generate Password':
            self.create_generate_password_frame()
        elif option == 'Save Personal Information':
            self.create_personal_information_frame()
        elif option == 'Save Banking Info':
            self.create_banking_info_frame()
        elif option == 'See All Saved Data':
            self.create_see_all_data_frame()

    def create_save_login_frame(self):
        tk.Label(self.frames['Save Login'], text="Domain:", **self.label_style).grid(row=0, column=0, sticky=tk.E, pady=5)
        tk.Entry(self.frames['Save Login'], textvariable=self.domain_var, **self.entry_style).grid(row=0, column=1, pady=5)
        tk.Label(self.frames['Save Login'], text="Username/Email:", **self.label_style).grid(row=1, column=0, sticky=tk.E, pady=5)
        tk.Entry(self.frames['Save Login'], textvariable=self.username_var, **self.entry_style).grid(row=1, column=1, pady=5)
        tk.Label(self.frames['Save Login'], text="Password:", **self.label_style).grid(row=2, column=0, sticky=tk.E, pady=5)
        tk.Entry(self.frames['Save Login'], textvariable=self.password_var, show='*', **self.entry_style).grid(row=2, column=1, pady=5)
        tk.Button(self.frames['Save Login'], text="Save Login", command=self.save_login, **self.button_style).grid(row=3, column=0, columnspan=2, pady=10)

    def create_generate_password_frame(self):
        tk.Label(self.frames['Generate Password'], text="Amount of passwords:", **self.label_style).grid(row=0, column=0, sticky=tk.E, pady=5)
        tk.Entry(self.frames['Generate Password'], textvariable=self.amount_var, **self.entry_style).grid(row=0, column=1, pady=5)

        tk.Label(self.frames['Generate Password'], text="Length of password:", **self.label_style).grid(row=1, column=0, sticky=tk.E, pady=5)
        tk.Entry(self.frames['Generate Password'], textvariable=self.length_var, **self.entry_style).grid(row=1, column=1, pady=5)

        tk.Label(self.frames['Generate Password'], text="Special characters to exclude:", **self.label_style).grid(row=2, column=0, sticky=tk.E, pady=5)
        tk.Entry(self.frames['Generate Password'], textvariable=self.special_var, **self.entry_style).grid(row=2, column=1, pady=5)

        tk.Label(self.frames['Generate Password'], text="Numbers to exclude:", **self.label_style).grid(row=3, column=0, sticky=tk.E, pady=5)
        tk.Entry(self.frames['Generate Password'], textvariable=self.numbers_var, **self.entry_style).grid(row=3, column=1, pady=5)

        tk.Label(self.frames['Generate Password'], text="Lowercase letters to exclude:", **self.label_style).grid(row=4, column=0, sticky=tk.E, pady=5)
        tk.Entry(self.frames['Generate Password'], textvariable=self.lowercase_var, **self.entry_style).grid(row=4, column=1, pady=5)

        tk.Label(self.frames['Generate Password'], text="Capital letters to exclude:", **self.label_style).grid(row=5, column=0, sticky=tk.E, pady=5)
        tk.Entry(self.frames['Generate Password'], textvariable=self.capitals_var, **self.entry_style).grid(row=5, column=1, pady=5)

        self.result_text = tk.Text(self.frames['Generate Password'], height=5, width=30, wrap=tk.WORD, **self.entry_style)

        self.result_text.grid(row=6, column=0, columnspan=2, pady=10)

        tk.Button(self.frames['Generate Password'], text="Generate Password", command=self.generate_passwords, **self.button_style).grid(row=7, column=0, columnspan=2, pady=10)

    def generate_passwords(self):
        chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890!$%^&*()_+-=[]{}|;:,.<>/?~'
        number = int(self.amount_var.get())
        length = int(self.length_var.get())
        special = self.special_var.get()
        numbers = self.numbers_var.get()
        lowercase = self.lowercase_var.get()
        capitals = self.capitals_var.get()

        passwords = []

        for _ in range(number):
            password = ''
            for _ in range(length):
                char = random.choice(chars)
                if char not in special and char not in numbers and char not in lowercase and char not in capitals:
                    password += char
            passwords.append(password)

        self.result_text.delete(1.0, tk.END)
        self.result_text.insert(tk.END, "\n".join(passwords))


    def create_personal_information_frame(self):
        
        pass

    def create_banking_info_frame(self):
        
        pass

    def create_see_all_data_frame(self):
        
        pass

    def save_login(self):
        domain = self.domain_var.get()
        username = self.username_var.get()
        password = self.password_var.get()

        
        self.saved_logins[domain] = {'Username': username, 'Password': password}

        
        messagebox.showinfo("Saved", "Login information saved successfully.")

       
        self.save_data_to_file()


if __name__ == "__main__":
    root = tk.Tk()
    app = DataManagementSystem(root)
    root.mainloop()
